" -- PRE  -------------------------------------------------------------------------------------------------------

set nocompatible                                    " make Vim behave in a more useful way


" -- GENERAL  ---------------------------------------------------------------------------------------------------

set autoindent                                      " copy indent from current line when starting a new line
set autoread                                        " read the file again if it has been changed outside of vim
set backspace=indent,eol,start                      " allow backspace to delete indent, end and start of line
set backupdir=~/.vim/backup//                       " set the directory for backups
set backupcopy=yes
set colorcolumn=80,120,140                          " set the screen column
set completeopt=longest,menuone                     " improve completion menu
set directory=~/.vim/swp//                          " set the directory for swaps
set encoding=utf-8 nobomb                           " set encoding
set expandtab                                       " use spaces instead of tabs
set hlsearch                                        " highlight matches
set ignorecase                                      " ignore case in searches
set incsearch                                       " highlight matches while typing
set laststatus=2                                    " always show a statusline
set lazyredraw                                      " prevent from unnecessary redraws
set list listchars=tab:\|-,trail:_                  " make whitespace characters visible
set matchpairs+=<:>                                 " '<' and '>' form a pair
set nobackup
set noerrorbells visualbell t_vb=                   " disable flash and bell on error
set nofoldenable                                    " open all folds
set nomodeline                                      " disable modeline
set noshowcmd                                       " do not show incomplete commands in the last line of the screen
set noshowmode                                      " do not show mode
set nostartofline                                   " keep the cursor in the same line after navigating
set nowrap                                          " do not wrap lines
set nowritebackup
set nojoinspaces                                    " do not insert two spaces after a '.', ', ', '?', '!' with a join command
set number                                          " show the absolute number
set path=$PWD/**                                    " set path to the current directory and its all subdirectories
set relativenumber                                  " show the relative number
set omnifunc=syntaxcomplete#Complete                " turn on omni completion according to syntax
set scrolloff=3                                     " start scrolling # lines before a buffer horizontal borders
set shiftwidth=2                                    " number of spaces used in autoindent
set smartcase                                       " disable ignorecase if uppercase letters are used
set splitright                                      " a new window is put on the right 
set splitbelow                                      " a new window is put below
set tabstop=2                                       " number of spaces for <tab>
set ttyfast                                         " send more characters to the screen for redrawing
set wildignore+=*/node_modules/*                    " ignore those files when expanding wildcards
set wildmenu                                        " enhance command-line completion


" -- COLORS  ----------------------------------------------------------------------------------------------------

set t_Co=256                                        " enable 256 colors
set background=dark                                 " set background

syntax on                                           " turn on syntax highlighting
colorscheme jellybeans                              " set colorscheme

" hide tilde signs at the end of buffer
" highlight EndOfBuffer ctermfg=black ctermbg=black

" no special color for listchars
hi SpecialKey ctermbg=none


" -- STATUS LINE  -----------------------------------------------------------------------------------------------

hi StatusLineNC ctermbg=black
hi StatusLine ctermbg=236
hi User1 ctermfg=cyan ctermbg=236
hi User2 ctermfg=yellow ctermbg=236
hi User3 ctermfg=green ctermbg=236
hi User4 ctermfg=red ctermbg=236
hi User5 ctermfg=224 ctermbg=236

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? '' : printf(
    \   '[%d %d]',
    \   all_errors,
    \   all_non_errors
    \)
endfunction

set statusline=%1*\ %n%2*\ %l/%L\ %v                " set the left of status line to: {line number/number of lines} {column number}
set statusline+=%=
set statusline+=%3*%f%4*%m                          " set the right of status line to: {relative path to file}{modified flag}
set statusline+=%5*%{LinterStatus()}%*              " append linter status to the right of status line
set statusline+=\ %1*%y                             " append filetype to the right of status line


" -- KEY BINDINGS  ----------------------------------------------------------------------------------------------

let mapleader=","                                   " map the leader key
let maplocalleader="\\"                             " map the local leader key

nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
nnoremap <leader>` viw<esc>a`<esc>bi`<esc>lel

" search in a very magic mode
nnoremap / /\v
" replace in a very magic mode
cnoremap %s %s/\v

" navigate faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
vnoremap <C-e> 3<C-e>
vnoremap <C-y> 3<C-y>

" clear search highlight
nnoremap <leader>n :noh<cr>

" indent the whole buffer and go back to the last position
nnoremap <leader>= gg=G``

" toggle case of the inner word
nnoremap <leader>~ g~iw

" insert a new line below the cursor
nnoremap <leader>o o<ESC>k 
" insert a new line above the cursor
nnoremap <leader>O O<ESC>j

" yank from the cursor to the end of line
nnoremap Y y$

" yank/paste to the system clipboard
nnoremap <leader>p "+p
nnoremap <leader>y "+y


" -- PLUGINS / FILETYPES  ---------------------------------------------------------------------------------------

filetype plugin indent on                           " turn on filetype plugin, indent and detection


" -- netrw  -----------------------------------------------------------------------------------------------------

let g:netrw_alto=0
let g:netrw_banner=0                                " hide the banner
let g:netrw_liststyle=3                             " enable tree style listings
let g:netrw_preview=1                               " preview window shown in a vertically split window

" settings for netrw buffers
let g:netrw_bufsettings='noma nomod nonu nobl nowrap ro rnu'

" toggle the local-directory browser in the left vertical split 
nnoremap <C-w>e :Lexplore<CR>


" -- ale  -------------------------------------------------------------------------------------------------------

let g:ale_lint_on_text_changed='always'             " dont lint on text change
let g:ale_lint_delay=1000                           " delay linting after text is changed
let g:ale_sign_column_always=1                      " keep the sign column open
let g:ale_completion_enabled=1                      " enable auto completion
let g:ale_linters_explicit=1                        " do not run linters unless they are specified explicitly

" set linters
let g:ale_linters={
\  'javascript': ['standard'],
\  'typescript': ['tsserver', 'tslint'],
\  'sh': ['shellcheck']
\}

" set fixers
let g:ale_fixers={
\  'javascript': ['standard'],
\  'typescript': ['tslint']
\}

" fix the code
nnoremap <leader>fi :ALEFix<CR>


" -- undotree  --------------------------------------------------------------------------------------------------

let g:undotree_HelpLine=0                           " hide help line
let g:undotree_WindowLayout=2                       " set the layout: the tree on the left, the diff below

" toggle undotree
nnoremap <leader>u :UndotreeToggle<CR>


" -- fzf  -------------------------------------------------------------------------------------------------------

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \  }

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

nnoremap <leader>a :Ag<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>t :Tags<CR>


" -- javascript  ------------------------------------------------------------------------------------------------

" vim-javascript
let g:javascript_plugin_flow=1                      " enable syntax highlighting for flow
let g:javascript_plugin_jsdoc=1                     " enable syntax highlighting for jsdoc

" tern for vim
let g:tern_map_keys=1                               " enable default key mappings


" -- python  ----------------------------------------------------------------------------------------------------

augroup pythonrc
  autocmd!
  autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
augroup END

" -- sh  ----------------------------------------------------------------------------------------------------

augroup shrc
  autocmd!
  autocmd FileType sh setlocal noexpandtab
augroup END


" -- autocommands  ----------------------------------------------------------------------------------------------

augroup disableAutoCommenting
  autocmd!
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

augroup autoChangeDirectory
  autocmd!
  autocmd InsertEnter * let b:save_cwd = getcwd() | set autochdir
  autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(b:save_cwd)
augroup END

augroup setRelativeNumberOnActiveWindow
  autocmd!
  autocmd BufEnter,WinEnter * if &ft!="netrw" && &ft!="help" | set relativenumber | endif
  autocmd BufLeave,WinLeave * if &ft!="netrw" && &ft!="help" | set norelativenumber | endif
augroup END

augroup quickfix
  autocmd!
  autocmd FileType qf nnoremap <buffer> <CR> <CR><C-W>p
  autocmd FileType qf nnoremap <buffer> <C-n> :cnext<CR><C-W>p
  autocmd FileType qf nnoremap <buffer> <C-p> :cprevious<CR><C-W>p
augroup END

function! SetDiffColors()
  highlight DiffAdd    cterm=none ctermfg=none ctermbg=22
  highlight DiffDelete cterm=none ctermfg=none ctermbg=52
  highlight DiffChange cterm=none ctermfg=none ctermbg=23
  highlight DiffText   cterm=none ctermfg=none ctermbg=23
endfunction

augroup setDiffColors
  autocmd!
  autocmd FilterWritePre * call SetDiffColors()
augroup END

" -- cursor shape -----------------------------------------------------------------------------------------------

augroup resetCursorShape
  au!
  autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

let &t_SI = "\e[6 q"                                " set the cursor to be a steady vertical line when insert mode starts
let &t_EI = "\e[2 q"                                " set the cursor to be a steady block when insert/replace mode ends

" -- local vimrc  -----------------------------------------------------------------------------------------------

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
