" -- PRE  -------------------------------------------------------------------------------------------------------

set nocompatible                                    " make Vim behave in a more useful way


" -- GENERAL  ---------------------------------------------------------------------------------------------------

set autoindent                                      " copy indent from current line when starting a new line
set autoread                                        " read the file again if it has been changed outside of vim
set backspace=indent,eol,start                      " allow backspace to delete indent, end and start of line
set backupdir=~/.vim/backup//                       " set the directory for backups
set backupcopy=yes
set colorcolumn=80,120,140                          " set the screen column
set completeopt=longest,menuone                     " improve completion menu
set directory=~/.vim/swp//                          " set the directory for swaps
set encoding=utf-8 nobomb                           " set encoding
set hlsearch                                        " highlight matches
set ignorecase                                      " ignore case in searches
set incsearch                                       " highlight matches while typing
set laststatus=2                                    " always show the statusline
set lazyredraw                                      " prevent from unnecessary redraws
set list listchars=tab:\|-,trail:_                  " make whitespace characters visible
set matchpairs+=<:>                                 " '<' and '>' form a pair
set nobackup
set noerrorbells visualbell t_vb=                   " disable flash and bell on error
set nofoldenable                                    " open all folds
set nomodeline                                      " disable modeline
set noshowcmd                                       " do not show incomplete commands in the last line of the screen
set noshowmode                                      " do not show mode
set nostartofline                                   " keep the cursor in the same line after navigating
set nowrap                                          " do not wrap lines
set nowritebackup
set nojoinspaces                                    " do not insert two spaces after a '.', ', ', '?', '!' with a join command
set number                                          " show the absolute number
set path=$PWD/**                                    " set path to the current directory and its all subdirectories
set relativenumber                                  " show the relative number
set omnifunc=syntaxcomplete#Complete                " turn on omni completion according to syntax
set scrolloff=3                                     " start scrolling # lines before a buffer horizontal borders
set signcolumn=yes                                  " always draw the sign column
set smartcase                                       " disable ignorecase if uppercase letters are used
set splitright                                      " a new window is put on the right
set splitbelow                                      " a new window is put below
set synmaxcol=240                                   " set maximum column in which to search for syntax items
set tabpagemax=100                                  " set maximum number of tab pages to be opened by the -p command
set ttyfast                                         " send more characters to the screen for redrawing
set wildignore+=*/node_modules/*                    " ignore those files when expanding wildcards
set wildmenu                                        " enhance command-line completion
set winminheight=0                                  " set the minimal height of a non active window
set winminwidth=0                                   " set the minimal width of a non active window

" -- COLORS  ----------------------------------------------------------------------------------------------------

set t_Co=256                                        " enable 256 colors

syntax on                                           " turn on syntax highlighting
colorscheme jellybeans                              " set colorscheme

" no special color for listchars
hi SpecialKey ctermbg=none


" -- STATUS LINE  -----------------------------------------------------------------------------------------------

hi StatusLineNC ctermbg=black
hi StatusLine ctermbg=236
hi User1 ctermfg=cyan ctermbg=236
hi User2 ctermfg=yellow ctermbg=236
hi User3 ctermfg=green ctermbg=236

set statusline=%1*\ %n%2*\ %l/%L                    " set the left of status line to: {line number/number of lines} {column number}
set statusline+=%=
set statusline+=%3*%f                               " set the right of status line to: {relative path to file}


" -- KEY BINDINGS  ----------------------------------------------------------------------------------------------

let mapleader=","
let maplocalleader="\\"

nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel
nnoremap <leader>` viw<esc>a`<esc>bi`<esc>lel

" search in a very magic mode
nnoremap / /\v
" replace in a very magic mode
cnoremap %s %s/\v

" navigate faster
nnoremap <c-e> 3<c-e>
nnoremap <c-y> 3<c-y>
vnoremap <c-e> 3<c-e>
vnoremap <c-y> 3<c-y>

" clear search highlight
nnoremap <leader>n :noh<cr>

" indent the whole buffer and go back to the last position
nnoremap <leader>= gg=G``

" toggle case of the inner word
nnoremap <leader>~ g~iw

" yank from the cursor to the end of line
nnoremap Y y$

" paste to the system clipboard
nnoremap <leader>p "+p

function! s:zoom_toggle() abort
  if 1 == winnr('$')
    return
  endif
  let restore_cmd = winrestcmd()
  wincmd |
  wincmd _
  " If the layout did not change, it's a toggle (un-zoom).
  if restore_cmd ==# winrestcmd()
    exe t:zoom_restore
  else
    let t:zoom_restore = restore_cmd
  endif
endfunction

" toggle zoom for an active window
nnoremap <c-w>z :call <sid>zoom_toggle()<cr>


" -- PLUGINS / FILETYPES  ---------------------------------------------------------------------------------------

filetype plugin indent on                           " turn on filetype plugin, indent and detection


" -- netrw  -----------------------------------------------------------------------------------------------------

let g:netrw_alto=0
let g:netrw_banner=0                                " hide the banner
let g:netrw_liststyle=0                             " show one file per line
let g:netrw_preview=1                               " preview window shown in a vertically split window

" settings for netrw buffers
let g:netrw_bufsettings='noma nomod nonu nobl nowrap ro rnu'

" toggle the local-directory browser in the left vertical split
nnoremap <c-w>E :Lexplore<cr>
nnoremap <c-w>e :Vexplore<cr>


" -- ale  -------------------------------------------------------------------------------------------------------

let g:ale_lint_on_text_changed='always'             " dont lint on text change
let g:ale_lint_delay=1000                           " delay linting after text is changed
let g:ale_completion_enabled=0                      " enable auto completion
let g:ale_linters_explicit=2                        " do not run linters unless they are specified explicitly
let g:ale_lint_on_enter=0

nnoremap <leader>fi :ALEFix<cr>


" -- undotree  --------------------------------------------------------------------------------------------------

let g:undotree_HelpLine=0                           " hide help line
let g:undotree_WindowLayout=2                       " set the layout: the tree on the left, the diff below
let g:undotree_SetFocusWhenToggle=1                 " focus undotree window after being opened

" toggle undotree
nnoremap <leader>u :UndotreeToggle<CR>


" -- fzf  -------------------------------------------------------------------------------------------------------

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
      \   'ctrl-q': function('s:build_quickfix_list'),
      \   'ctrl-t': 'tab split',
      \   'ctrl-s': 'split',
      \   'ctrl-v': 'vsplit'
      \ }

command! -bang -nargs=* Ag call fzf#vim#ag(
      \   <q-args>,
      \   <bang>0 ? fzf#vim#with_preview('up:60%') : { },
      \   <bang>0
      \ )

function! s:fzf_dirs(dir, bang)
  let l:dir = empty(a:dir) || !isdirectory(expand(a:dir)) ?
        \ fnamemodify(getcwd(), ':~:.') :
        \ a:dir

  let l:prompt = (strwidth(l:dir) < &columns / 2 - 20 ? l:dir : '') . '> '
  let l:options = ['+m', '--prompt', l:prompt]

  if a:bang
    call extend(l:options, ['--preview', 'ls -p {}'])
  endif

  return fzf#run(fzf#wrap({
        \   'source': 'fd -t d',
        \   'dir': l:dir,
        \   'options': l:options
        \ }, a:bang))
endfunction

command! -bang -nargs=? -complete=dir Dirs call <sid>fzf_dirs(<q-args>, <bang>0)

nnoremap <space>f :Files<cr>
nnoremap <space>d :Dirs<cr>
nnoremap <space>b :Buffers<cr>


" -- autocommands  ----------------------------------------------------------------------------------------------

augroup disable_auto_commenting
  autocmd!
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

augroup auto_change_dir
  autocmd!
  autocmd InsertEnter * let b:save_cwd = getcwd() | set autochdir
  autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(b:save_cwd)
augroup END

augroup set_relativenumber_on_active_window
  autocmd!
  autocmd BufEnter,WinEnter * if &ft!="netrw" && &ft!="help" | set relativenumber | endif
  autocmd BufLeave,WinLeave * if &ft!="netrw" && &ft!="help" | set norelativenumber | endif
augroup END

function! s:set_diff_colors()
  highlight DiffAdd    cterm=none ctermfg=none ctermbg=22
  highlight DiffDelete cterm=none ctermfg=none ctermbg=52
  highlight DiffChange cterm=none ctermfg=none ctermbg=23
  highlight DiffText   cterm=none ctermfg=none ctermbg=23
endfunction

augroup set_diff_colors
  autocmd!
  autocmd FilterWritePre * call <sid>set_diff_colors()
augroup END


" -- cursor shape -----------------------------------------------------------------------------------------------

augroup reset_cursor_shape
  autocmd!
  autocmd VimEnter * silent !echo -ne "\e[2 q"
augroup END

let &t_SI = "\e[6 q"                                " set the cursor to be a steady vertical line when insert mode starts
let &t_EI = "\e[2 q"                                " set the cursor to be a steady block when insert/replace mode ends


" -- local vimrc  -----------------------------------------------------------------------------------------------

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
