#!/usr/bin/env bash

shopt -s checkwinsize  # check the window size after each command and update the values of LINES and COLUMNS
shopt -s cmdhist       # save multiline command in one line
shopt -s histappend    # append to history instead of overwriting it
shopt -s nocaseglob    # match files in a case-insensitive fashion

# don't put duplicate lines or lines starting with space in the history:eliminate duplications before saving the line
export HISTCONTROL=ignoreboth:erasedups

export HISTIGNORE="&:[ ]*:?:??:exit:history:clear:pwd"
# export PS1='\$ '
export PS1="\\033[90m\$ \\033[0m"
export EDITOR='vim -e'
export VISUAL=vim

# aliases
alias dotfiles='cd ~/dotfiles'

alias vimrc='vim ~/.vim/vimrc'
alias git-top='cd "$(git rev-parse --show-toplevel)"'
alias gt='git-top'
alias pkg-top='pkg_top'
alias pt='pkg-top'

alias tf='terraform'
alias d='docker'
alias g='git'
alias b='bat'

alias aws-dev='aws_exec'
alias aws-prod='aws_exec prod'

export_aws () {
	profile=${1:-default}

	AWS_ACCESS_KEY_ID="$(aws configure get --profile "$profile" aws_access_key_id)"
	AWS_SECRET_ACCESS_KEY="$(aws configure get --profile "$profile" aws_secret_access_key)"

	export AWS_ACCESS_KEY_ID
	export AWS_SECRET_ACCESS_KEY
}

set_aws_profile () {
	local profile=${1:-dev}

	AWS_ACCESS_KEY_ID=$(pass aws/"$profile"/access_key)
	AWS_SECRET_ACCESS_KEY=$(pass aws/"$profile"/secret_key)

	export AWS_ACCESS_KEY_ID
	export AWS_SECRET_ACCESS_KEY
}

export AWS_VAULT_BACKEND=pass
export AWS_VAULT_PASS_PREFIX=aws-vault

get_mfa() {
	oathtool --base32 --totp "$(pass aws/dev/mfa)" | pbcopy
}

get_mfa_prod() {
	oathtool --base32 --totp "$(pass aws/prod/mfa)" | pbcopy
}

aws_exec () {
	local profile=dev

	if [ "$1" = dev ] || [ "$1" = prod ]; then
		profile=$1
		shift
	fi

	aws-vault exec --mfa-token="$(oathtool --base32 --totp "$(pass aws/"${profile}"/mfa)")" "${profile}" -- "$@"
}

docker_lim() {
	echo -n "$(docker image ls --format '{{.Repository}}:{{.Tag}}' | head -n 1)" | pbcopy
}

docker_ps_watch() {
	local ids ids_count id
	ids="$(docker container ps --format '{{.ID}}')"
	ids_count="$(echo -n "$ids" | grep -c ^)"
	id="$ids"

	[ "$ids_count" -eq 0 ] && return

	[ "$ids_count" -gt 1 ] && id="$(echo "$ids" | fzf --print0)"

	docker exec -it "$id" watch ps
}

docker_ps_sh() {
	local ids ids_count id
	containers="$(docker container ps --format 'table {{.ID}}\t{{.Image}}\t{{.Names}}' | tail -n +2)"
	ids="$(echo "$containers" | awk '{ print $1 }')"

	ids_count="$(echo -n "$ids" | grep -c ^)"
	id="$ids"

	[ "$ids_count" -eq 0 ] && return

	[ "$ids_count" -gt 1 ] && id="$(echo "$containers" | fzf --print0 | awk '{ print $1 }')"

	docker exec -it "$id" sh
}

ecr_login () {
	local region=${1:-eu-west-2}
	local account=${2:-955517586947}
	local ecr_url="${account}.dkr.ecr.${region}.amazonaws.com"

	set_aws_profile dev
	#eval "$(aws ecr get-login --region "$region" --no-include-email)"
	aws ecr get-login-password --region "${region}" | docker login --username AWS --password-stdin "${ecr_url}"
}

ecr_login_prod () {
	local region=${1:-eu-west-1}
	local account=${2:-711372962861}
	local ecr_url="${account}.dkr.ecr.${region}.amazonaws.com"

	set_aws_profile prod
	#eval "$(aws ecr get-login --region "$region" --no-include-email)"
	aws ecr get-login-password --region "${region}" | docker login --username AWS --password-stdin "${ecr_url}"
}
open_aws_prod () {
	# /Applications/Firefox.app/Contents/MacOS/firefox --private-window "$(aws-vault login --stdout prod)"
	/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --incognito "$(aws-vault login --stdout prod)"
}

open_aws () {
	/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$(aws-vault login --stdout dev)"
}

set_npm_token () {
	NPM_TOKEN=$(head -n 1 < ~/.npmrc | cut -d= -f 2)

	export NPM_TOKEN
}
. "$HOME/.cargo/env"

pkg_top () {
	[ -f package.json ] || [ "$(pwd)" = "/" ] && : || { cd .. && pkg_top; }
}

fcd () {
	local \
		gt \
		orig_dir \
		dir

	gt="$(git rev-parse --show-toplevel)"
	orig_dir="$(pwd)"

	[ -n "$gt" ] && cd "$gt" || cd "$orig_dir" || return 1

	dir="$(fd --color=always --hidden --exclude .git --type d --print0 . | fzf --read0 --ansi --no-multi --exit-0 --select-1 --preview='tree {}')"

	[ -n "$dir" ] && cd "$dir" || cd "$orig_dir" || return 1
}

test_colors () {
	awk 'BEGIN{
	s="/\\/\\/\\/\\/\\"; s=s s s s s s s s s s s s s s s s s s s s s s s;
	for (colnum = 0; colnum<256; colnum++) {
		r = 255-(colnum*255/255);
		g = (colnum*510/255);
		b = (colnum*255/255);
		if (g>255) g = 510-g;
			printf "\033[48;2;%d;%d;%dm", r,g,b;
			printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
			printf "%s\033[0m", substr(s,colnum+1,1);
		}
		printf "\n";
	}'
}

alias graph-easy='/usr/local/Cellar/perl/5.34.0/bin/graph-easy'

passf () {
	local dir

	dir="$HOME/.password-store/"

	fd -e 'gpg' . "$dir" \
		| sed -e "s:$dir::g" -e 's:.gpg$::g' \
		| fzf +m --select-1 \
		| xargs -n 1 pass -c
}

if [ -f ~/.bashrc.local ]; then
	# shellcheck source=/dev/null
	. ~/.bashrc.local
fi
